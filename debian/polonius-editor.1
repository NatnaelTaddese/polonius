.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "polonius-editor" "1" "" "Version 1.0" "Manual for the Polonius Editor"
.hy
.SH NAME
.PP
polonius-editor - sequentially executes editing instructions on a file
.SH SYNOPSIS
.PP
\f[V]polonius-editor ./file -a \[dq]INSERT 0 hello world\[dq]\f[R]
.PP
\f[V]polonius-editor ./file -a \[dq]INSERT 0 abc; 10 def; 20 ghi\[dq]\f[R]
.PP
\f[V]polonius-editor ./file -a \[dq]REMOVE 0 5\[dq]\f[R]
.PP
\f[V]polonius-editor ./file -a \[dq]REPLACE 0 salut a tous\[rs]nAnd hello\[dq] --special-chars\f[R]
.PP
\f[V]polonius-editor ./file -a \[dq]INSERT end hello world\[dq] -a \[dq]REMOVE 0 5\[dq] -a \[dq]REPLACE 0 salut a tous\[dq]\f[R]
.SH OPTIONS
.SS OVERVIEW
.PP
-i / \[en]input
.IP
.nf
\f[C]
Specify file to edit

The file can also be specified without the \[aq]-i\[aq] option
\f[R]
.fi
.PP
-a / \[en]add-instruction
.IP
.nf
\f[C]
Instruct the program on how to edit your file

Example instructions:

  REPLACE 5 hello world
    (Replaces text, starting from character #5, with \[dq]hello world\[dq])

  INSERT 7 salut a tous
    (Inserts \[dq]salut a tous\[dq] at character #7, shifting the rest of the file without replacing it)

  REMOVE 9 15
    (Removes characters #9 to #15 from the file)

  The \[aq]end\[aq] keyword can also be used in place of absolute positions, and refers always to the end of the file.

Multiple instructions of the same *type* can be combined into a single line, by separating them with semicolons. As in:

  REPLACE 0 abc; 10 def; 20 ghi

If you want to input a literal semicolon, it must be escaped (so that it won\[aq]t be mistaken for the delimiter). As in:

  INSERT 0 the \[rs]; symbol
\f[R]
.fi
.PP
-s / \[en]add-instruction-sequence
.IP
.nf
\f[C]
Provide a sequence of multiple instructions for editing the file

Each instruction in the sequence should be on its own line, as in the following example:

  --add-instruction-sequence \[dq]REPLACE 20 hello world
  INSERT 50 hello again; 100 finally goodbye
  REMOVE 70 75\[dq]
\f[R]
.fi
.PP
-c / \[en]special-chars
.IP
.nf
\f[C]
Interpret escaped character sequences (\[rs]n, \[rs]t, \[rs]\[rs], and \[rs]x00 - \[rs]xFF)
\f[R]
.fi
.PP
-b / \[en]block-size
.IP
.nf
\f[C]
Specify the maximum amount of data we can load from the file into memory at any given time

Defaults to 10 kilobytes if not specified
\f[R]
.fi
.PP
-v / \[en]verbose
.IP
.nf
\f[C]
Verbose mode
\f[R]
.fi
.PP
-V / \[en]version
.IP
.nf
\f[C]
Print version number
\f[R]
.fi
.PP
-h / \[en]help
.IP
.nf
\f[C]
Display help menu
\f[R]
.fi
.SS BLOCK SIZE
.PP
Specifying the \[lq]Block Size\[rq] tells Polonius how much data from
the file we\[cq]re willing to load into memory at once.
.PP
The default value (if unspecified) is \f[B]10 kilobytes\f[R]
.PP
The block size can be specified with the \f[I]-b\f[R] option, in the
formats:
.IP
.nf
\f[C]
1. \[ga]-b 15\[ga] (This would set the block size to 15 bytes)

2. \[ga]-b 16K\[ga] (This would set the block size to 16 kilobytes)

3. \[ga]-b 17M\[ga] (This would set the block size to 17 megabytes)
\f[R]
.fi
.PP
And of course, the example numbers `15', `16', and `17' can be swapped
for any arbitrary number
.PP
This option is common to both \f[B]polonius-reader\f[R] and
\f[B]polonius-editor\f[R]
.SS SPECIAL CHARACTERS
.PP
Setting the \[lq]special characters\[rq] flag tells Polonius to process
\f[B]escaped character sequences\f[R].
Polonius will process \f[V]\[rs]n\f[R], \f[V]\[rs]t\f[R],
\f[V]\[rs]\[rs]\f[R], and \f[V]\[rs]x00\f[R] through \f[V]\[rs]xFF\f[R].
.PP
The special characters flag can be set with the \f[I]-c\f[R] option.
.SS VERBOSE
.PP
Setting the \[lq]verbose\[rq] flag tells Polonius to let you in on what
it\[cq]s doing as it\[cq]s making edits to the file.
.PP
The verbose flag can be set with the \f[I]-v\f[R] option.
.PP
Here is some example output from Polonius with the verbose flag set:
.IP
.nf
\f[C]
$ polonius-editor ./file --verbose --add-instruction-sequence \[rs]
> \[dq]INSERT 0 hello world
> REMOVE 0 5
> REMOVE 10 10
> REPLACE 0 hello
> REPLACE 0 goodbye123
> INSERT 10 4\[dq]

Set file to ./file
Adjusted file length to 18
Moved 6 bytes to position #11 for INSERT instruction
Executed INSERT instruction (0, hello world)
Moved 11 bytes to position #0 for REMOVE instruction
Executed REMOVE instruction (0, 6)
Executed REMOVE instruction (10, 11)
Executed REPLACE instruction (0, hello)
Executed REPLACE instruction (0, goodbye123)
Executed INSERT instruction (10, 4)
\f[R]
.fi
.SH INSTRUCTIONS
.PP
Instructions are provided using either:
.IP "1." 3
The \f[I]\[en]add-instruction\f[R] / \f[I]-a\f[R] option
.IP "2." 3
The \f[I]\[en]add-instruction-sequence\f[R] / \f[I]-s\f[R] option
.PP
Valid instruction types are: \f[I]INSERT\f[R], \f[I]REMOVE\f[R], and
\f[I]REPLACE\f[R].
Instruction types are not case-sensitive.
.SS \[lq]INSERT\[rq] INSTRUCTIONS
.PP
INSERT instructions are used to insert text into the file without
deleting pre-existing text.
.PP
The format for an insert instruction is:
.PP
\f[V]INSERT start-position text to insert\f[R]
.PP
For example, \f[V]INSERT 0 hello world\f[R] will insert the phrase
\[lq]hello world\[rq] at position 0 (the start of the file).
If the file previously contained:
.PP
\f[V]ABC123\f[R]
.PP
Then it will now contain:
.PP
\f[V]hello worldABC123\f[R]
.PP
Insert instructions will fail (and give an error) if the start position
is \f[B]less than zero\f[R], or is \f[B]beyond the end of the file\f[R]
.PP
The `end' keyword can also be used in place of an absolute start
position.
For example, \f[V]INSERT end goodbye world\f[R] will place \[lq]goodbye
world\[rq] at the end of the file.
If we were working on the same \f[V]ABC123\f[R] file as before, it would
now contain:
.PP
\f[V]ABC123goodbye world\f[R]
.SS \[lq]REMOVE\[rq] INSTRUCTIONS
.PP
REMOVE instructions are used to delete text from the file.
.PP
The format for a remove instruction is:
.PP
\f[V]REMOVE start-position end-position\f[R]
.PP
For example, \f[V]REMOVE 0 5\f[R] will remove characters \f[I]0, 1, 2,
3, 4,\f[R] and \f[I]5\f[R].
If the file previously contained:
.PP
\f[V]hello worldABC123\f[R]
.PP
Then it will now contain:
.PP
\f[V]worldABC123\f[R]
.PP
To remove \f[I]only one character\f[R], make the
\f[B]start-position\f[R] and \f[B]end-position\f[R] \f[I]exactly the
same\f[R].
.PP
For instance, running \f[V]REMOVE 0 0\f[R] will delete the first
character of the file.
Running \f[V]REMOVE 1 1\f[R] will delete the second character, etc
.PP
Remove instructions will fail (and give an error) if:
.IP \[bu] 2
The start position is \f[B]less than zero\f[R]
.IP \[bu] 2
The end position is \f[B]lower than the start position\f[R]
.IP \[bu] 2
Either position is \f[B]beyond the end of the file\f[R]
.PP
The `end' keyword can also be used in place of an absolute start or end
position.
For example, in the file containing:
.PP
\f[V]worldABC123\f[R]
.PP
If we ran \f[V]REMOVE end end\f[R], the file would now contain:
.PP
\f[V]worldABC12\f[R]
.PP
It would remove the last character of the file.
On the other hand, if we ran \f[V]REMOVE 1 end\f[R], we would remove
\f[I]everything\f[R] after the very first character, and the file would
now contain only:
.PP
\f[V]w\f[R]
.PP
And of course running \f[V]REMOVE 0 end\f[R] would remove
\f[I]everything\f[R].
.SS \[lq]REPLACE\[rq] INSTRUCTIONS
.PP
REPLACE instructions are used to replace existing text in the file
\f[B]without changing the file size\f[R].
.PP
Replace instructions are \f[B]by far\f[R] the \f[I]fastest\f[R]
operations Polonius can perform, and do not require storing
\f[B]anything\f[R] from the file in memory.
\f[I]They should be used in preference to Removes or Inserts wherever
possible.\f[R]
.PP
The format for a replace instruction is:
.PP
\f[V]REPLACE start-position new text to go in its place\f[R]
.PP
For example, \f[V]REPLACE 0 hello\f[R] will replace the first batch of
characters with the world \[lq]hello\[rq].
Specifically, it will replace characters \f[I]0, 1, 2, 3,\f[R] and *4**
with \f[I]\[lq]h\[rq], \[lq]e\[rq], \[lq]l\[rq], \[lq]l\[rq],\f[R] and
\f[I]\[lq]o\[rq]\f[R].
If the file previously contained:
.PP
\f[V]worldABC12\f[R]
.PP
Then it will now contain:
.PP
\f[V]helloABC12\f[R]
.PP
Replace instructions will fail (and give an error) if the \f[B]start or
end\f[R] of the replacement text is \f[B]beyond the end of the
file\f[R].
.PP
For example, if the instruction \f[V]REPLACE 0 goodbye12345\f[R] was run
on our example file (which contains \f[V]helloABC12\f[R]), the
instruction would fail, because the replacement text is \f[I]longer\f[R]
than the text actually in the file \[en] there\[cq]s not enough in the
file to replace!
Our replacement text (\[lq]goodbye12345\[rq]) extends \f[I]beyond the
current bounds\f[R] of the file.
Instead, we should run two instructions:
.IP \[bu] 2
First, \f[V]REPLACE 0 goodbye123\f[R] (replacing what \f[I]can\f[R] be
replaced)
.IP \[bu] 2
Then, \f[V]INSERT 10 45\f[R]
.PP
The `end' keyword can also be used in place of an absolute start
position.
For example, if our file contained:
.PP
\f[V]goodbye12345\f[R]
.PP
And we ran the instruction \f[V]REPLACE end world\f[R], the file would
now contain:
.PP
\f[V]goodbyeworld\f[R]
.PP
We would be replacing the last \f[I]n\f[R] characters of the file with
\f[I]\[lq]w\[rq], \[lq]o\[rq], \[lq]r\[rq], \[lq]l\[rq],
\[lq]d\[rq]\f[R] (in this case, 5 characters, replacing
\f[I]\[lq]1\[rq], \[lq]2\[rq], \[lq]3\[rq], \[lq]4\[rq],
\[lq]5\[rq]\f[R])
